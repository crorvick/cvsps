= cvsps(1) =
:doctype: manpage

== NAME ==
cvsps - fast export the contents of a CVS repository 

== SYNOPSIS ==
*cvsps*
    [-h] [-z 'fuzz'] [-g] [-s 'patchset'] [-a 'author']
    [-f 'file'] [-d 'date1' [-d 'date2']] [-l 'text'] [-b 'branch']
    [-r 'tag' [-r 'tag']] [-p 'directory'] [-v] [-t]
    [--summary-first] [--test-log 'filename'] [--diff-opts 'option string']
    [--debuglvl 'bitmask'] [-Z 'compression'] [--root 'cvsroot']
    [-q] [-A] [--fast-export] [-T] ['repository'] 

== DESCRIPTION ==
CVSps is a program for generating 'patchset' information from a CVS
repository.  A patchset in this case is defined as a set of changes made
to a collection of files, and all committed at the same time (using a
single 'cvs commit' command).  This information is valuable to seeing the
big picture of the evolution of a CVS project.  While CVS tracks revision
information, it is often difficult to see what changes were committed
'atomically' to the repository.

The default reporting mode is designed for humans to look at.  The
--fast-export mode emits a git import stream which can be consumed
by the importers for other version-control systems.  In this mode,

* Each patchset becomes a commit.

* CVS tags become git lightweight tags, and more than one may be
reported per patchset (in the default mode only the latest is reported).

* The HEAD branch is renamed to 'master'.

* Other tag and branch names are sanitized to be legal for git.

* Since .cvsignore files have a syntax upward-compatible with that
of .gitignore files, they're renamed.

CVSps honors the CVS_RSH and CVS_SERVER environment variables, but
does not parse the ~/.cvsrc file.

== OPTIONS ==
-h::
display usage summary.
-z <fuzz>::
set the timestamp fuzz factor for identifying patch sets.
-g::
generate diffs of the selected patch sets.
-s <patchset>[-[<patchset>]][,<patchset>...]::
generate a diff for a given patchsets and patchset ranges.
-a <author>::
restrict output to patchsets created by author.
-f <file>::
restrict output to patchsets involving file.
-d <date1> -d <date2>::
if just one date specified, show revisions newer than date1.  If two
dates specified, show revisions between two dates.
-l <regex>::
restrict output to patchsets matching regex in log message.
-b <branch>::
restrict output to patchsets affecting history of branch.
If you want to restrict to the main branch, use a branch of 'HEAD'.
-r <tag1> -r <tag2>::
if just one tag specified, show revisions since tag1. If two tags
specified, show revisions between the two tags.
-p <dir>::
output individual patchsets as files in <dir> as <dir>/<patchset>.patch.
-v::
show very verbose parsing messages.
-t::
show some brief memory usage statistics.
--summary-first::
when multiple patchset diffs are being generated, put the patchset
summary for all patchsets at the beginning of the output.
--test-log <captured cvs log file>::
for testing changes, you can capture cvs log output, then test against
this captured file instead of hammering some poor CVS server.
--diffs-opts <option string>::
send a custom set of options to diff, for example to increase
the number of context lines, or change the diff format.
--debuglvl <bitmask>::
enable various debug output channels.
-Z <compression>::
A value 1-9 which specifies amount of compression.  A value of 0
disables compression.
--root <cvsroot>::
Override the setting of CVSROOT (overrides working dir. and
environment).
-A::
Show ancestor branch when a new branch is found.
-T::
Force deterministic dates for regression testing.  Takes a date
argument which set the base time; ech patchset will have an attributed 
date of as many seconds passs the base time as its ID.
--fast-export::
Emit the report as a git import stream.
<repository>::
Operate on the specified repository.  If this option is not 
specified, either the CVSROOT environment variable must be set
to point at the repository or CVSps must be run in a repository's
checkout directory.

== USAGE EXAMPLES ==
cvsps::
      Run within a checkout directory, dumps the history of its module in
      its repository in the old format.
cvsps --root :local:$PWD/foo --fast-export bar::
      Dump the history of module bar from a local repository directory foo in
      fast-export format.

== NOTE ON TAG HANDLING ==
Tags are fundamentally 'file at a time' in CVS, but like everything else,
it would be nice to imagine that they are 'repository at a time.'  The
approach cvsps takes is that a tag is assigned to a patchset.  The meaning
of this is that after this patchset, every revision of every file is after
the tag (and conversely, before this patchset, at least one file is still
before the tag).  

However, there are two kinds of inconsistent (or 'funky') tags that
can be created with older versions of CVS, even when following best
practices for CVS.  Newer version do an up-to-dateness check that
prevents these.

The first is what is called a *funky* tag.  A funky tag is one where
there are patchsets which are chronologically (and thus by patchset
id) earlier than the tag, but are tagwise after.  These tags will be
marked as '**FUNKY**' in the Tag: section of the cvsps output.  When a
funky tag is specified as one of the '-r' arguments, there are some
number of patchsets which need to be considered out of sequence.  In
this case, the patchsets themselves will be labeled FUNKY and will be
processed correctly.

The second is called an *invalid* tag.  An invalid tag is a tag where
there are patchsets which are chronologically (and thus by patchset
id) earlier than the tag, but which have members which are tagwise
both before, and after the tag, in the same patchset.  If an INVALID
tag is specified as one of the '-r' arguments, cvsps will flag each
member of the affected patchsets as before or after the tag and the
patchset summary will indicate which members are which, and diffs will
be generated accordingly.

These may be better explained by examples.  The easiest test case for 
this is two developers, starting in a consistent state.
(a)::
developer 1 changes file A(sub1) to A(sub2) and commits, creating
patchset P(sub1) chronologically earlier, thus with a lower patchset id.
(b)::
developer 2 changes file B(sub1) to B(sub2) and commits, creating
patchset P(sub2) chronologically later, thus higher patchset id.
(c)::
developer 2 B does fInotfR do "cvs update", so does not get A(sub2) in
working directory and creates a "tag" T(sub1)

A checkout of T(sub1) should have A(sub1) and B(sub2) and there is no
"patchset" that represents this. In other words, if we label patchset
P(sub2) with the tag there are earlier patchsets which need to be
disregarded.

An "invalid" tag can be generated with a similar testcase, except:

* In step (a) developer 1 also changes file C(sub1) to C(sub2)

* developer 2 does a "selective" cvs update of only file C(sub2)

* developer 1 does another change from C(sub2) to C(sub3), creating
a new patchset in between the previous P(sub1) and P(sub2)
"P(sub1(sub2))??"

* Then we have step (b) and step (c).  After this, a checkout of T(sub1)
should have A(sub1), B(sub2) and C(sub2).

In other words, if we label patchset P(sub2) with the tag there are
earlier patchsets which need to be *partially* disregarded.

== NOTE ON CVSPS RC FILE ==
CVSps parses an rc file at startup.  This file should be located in
~/.cvsps/cvspsrc.  The file should contain arguments, in the exact
syntax as the command line, one per line.  If an argument takes a
parameter, the parameter should be on the same line as the argument.

== NOTE ON DATE FORMATS ==
Dates are reported in localtime, except that fast-export mode reports
UTC.  The preferred input format for dates is as in RFC3339:
yyyy-mm-ddThh:mm:ss.  For backward compatibility with older
versions, 'yyyy/mm/dd hh:mm:ss' is also accepted. As a contrived
example:

   $ cvsps -d '2004-05-01T00:00:00' -d '2004/07/07 12:00:00'

== SEE ALSO ==
cvs(1)

== LIMITATIONS ==
CVSps may be unable to communicate with some extremely ancient CVS
servers.  If this happens, mirror the repository locally with rsync
or cvssuck and proceed.

CVS branches that were created but never got any file commits will
not be reported.

CVS-NT and versions of GNU CVS after 1.12 (2004) added a changeset
commit-id to file metadata. Older sections of CVS history without
these are vulnerable to various problems caused by clock skew between
clients; this used to be relatively common for multiple reasons,
including less pervasive use of NTP clock synchronization. CVSps will
warn you when it sees such a section in your history. When it does,
these caveats apply:

* If timestamps of commits in the CVS repository were not stable
enough to be used for ordering commits, changes may be reported in the
wrong order.

* If the timestamp order of different files crosses the revision order
within the commit-matching time window, the order of commits reported 
may be wrong.

CVSps cannot fix these problems; they are inherent to CVS.

== REPORTING BUGS ==
Report bugs to Eric S. Raymond <esr@thyrsus.com>.  The project page
is at http://catb.org/~esr/cvsps
 
