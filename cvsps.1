.TH "cvsps" 1
.SH NAME
CVSps \- create patchset information from CVS
.SH SYNOPSIS
.B cvsps
[-x] [-u] [-z <fuzz>] [-s <patchset>] [-a <author>] [-l <text>] [-f <file>] [-d <date1> [-d <date2>]] [-b <branch>] [-p <patchdir>] [-v] [-h]
.SH DESCRIPTION
CVSps is a program for generating 'patchset' information from a CVS
repository.  A patchset in this case is defined as a set of changes made
to a collection of files, and all committed at the same time (using a
single 'cvs commit' command).  This information is valuable to seeing the
big picture of the evolution of a cvs project.  While cvs tracks revision
information, it is often difficult to see what changes were committed
'atomically' to the repository.
.SH OPTIONS
.TP
.B \-x
ignore (and rebuild) ~/.cvsps/cvsps.cache file
.TP
.B \-u
update ~/.cvsps/cvsps.cache file
.TP
.B \-z <fuzz>
set the timestamp fuzz factor for identifying patch sets
.TP
.B \-g
generate diffs of the selected patch sets
.TP
.B \-s <patchset>[-[<patchset>]][,<patchset>...]
generate a diff for a given patchsets and patchset ranges
.TP
.B \-p <dir>
output individual patchsets as files in <dir> as <dir>/<patchset>.patch
.TP
.B \-a <author>
restrict output to patchsets created by author
.TP
.B \-l <regex>
restrict output to patchsets matching regex in log message
.TP
.B \-f <file>
restrict output to patchsets involving file
.TP
.B \-d <date1> -d <date2>
if just one date specified, show
revisions newer than date1.  If two dates specified,
show revisions between two dates.
.TP
.B \-r <tag1> -r <tag2>
if just one tag specified, show
revisions since tag1. If two tags specified, show
revisions between the two tags.
.TP
.B \-b <branch>
restrict output to patchsets affecting history of branch.
If you want to restrict to the main branch, use a branch of 'HEAD'.
.TP
.B \-v
show verbose parsing messages
.TP
.B \-t
show some brief memory usage statistics
.TP
.B \--norc
when invoking cvs, ignore the .cvsrc file
.TP
.B \--summary-first
when multiple patchset diffs are being generated, put the patchset
summary for all patchsets at the beginning of the output.
.TP
.B \--test-log <captured cvs log file>
for testing changes, you can capture cvs log output, then test against
this captured file instead of hammering some poor CVS server
.TP
.B \-h
display usage summary
.SH "NOTE ON TAG HANDLING"
Tags are fundamentally 'file at a time' in cvs, but like everything else,
it would be nice to imagine that they are 'repository at a time.'  The
approach cvsps takes is that a tag is assigned to a patchset.  The meaning
of this is that after this patchset, every revision of every file is after
the tag (and conversely, before this patchset, at least one file is still
before the tag).  However, there are two kinds of inconsistent (or 'funky')
tags that can be created, even when following best practices for cvs.  
.PP
The first
is what is called a FUNKY tag.  A funky tag is one where there are patchsets
which are chronologically (and thus by patchset id) earlier than the tag, but
are tagwise after.  These tags will be marked as '**FUNKY**' in the Tag: section
of the cvsps output.  When a funky tag is specified as one of the '-r' arguments,
there are some number of patchsets which need to be considered out of sequence.  
In this case, the patchsets themselves will be labeled FUNKY and will be processed
correctly.
.PP
The second is called an INVALID tag.  An invalid tag is a tag where there are
patchsets which are chronologically (and thus by patchset id) earlier than the tag,
but which have members which are tagwise both before, and after the tag, in the
same patchset.  If an INVALID tag is specified as one of the '-r' arguments,
cvsps will flag each member of the affected patchsets as before or after the tag
and the patchset summary will indicate which members are which, and diffs will 
be generated accordingly.
.SH "NOTE ON DATE FORMATS"
Dates have formats.  Fixme.
.SH "SEE ALSO"
.BR cvs ( 1 ),
.BR ci ( 1 ),
.BR co ( 1 ),
.BR cvs ( 5 ),
.BR cvsbug ( 8 ),
.BR diff ( 1 ),
.BR grep ( 1 ),
.BR patch ( 1 ),
.BR rcs ( 1 ),
.BR rcsdiff ( 1 ),
.BR rcsmerge ( 1 ),
.BR rlog ( 1 ).
.SH "REPORTING BUGS"
Report bugs to "David Mansfield <cvsps@dm.cobite.com>"
.SH BUGS
No known bugs.

